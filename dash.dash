main =
  environment.self.
    withCommand(buildDemo).
    serve

code = host.directory(
  path: ".",
  include: %w{
    **/*.go
    **/go.mod
    **/go.sum
    **/testdata/**/*
    **/*.proto
    **/*.tmpl
  }
  exclude: %w{
    ci/**/*
  }
)

buildDemo = goBuild(
  base: base,
  source: code,
  packages: [./demo], # typed, somehow
  static: true,
  subdir: ./demo/,
)

# simple assignment, no := or anything fancy
packages = wolfi(%w{
  go
  protobuf-dev
  protoc
  protoc-gen-go
  protoc-gen-go-grpc
})

fn wolfi(packages: [String]): Container {
  config = {
    cmd: "/bin/sh",
    environment: {
      PATH: "/usr/sbin:/sbin:/usr/bin:/bin",
    },
    archs: [defaultPlatform.arch],
    contents: {
      repositories: ["https://packages.wolfi.dev/os"],
      keyring: ["https://packages.wolfi.dev/os/wolfi-signing.rsa.pub"],
      packages: packages,
    }
  }.yaml

  configDir = directory.withNewFile("config.yml", config)

  fork = git("https://github.com/vito/apko").branch("oci-layout").tree

  apko = container
    . from("golang:alpine")
    . with(goCache)
    . withMountedDirectory("/apko", fork)
    $ go install -C /apko ./;
    . withEntrypoint(["apko"])

  layout = apko
    . withMountedFile("/config.yml", configDir.file("config.yml"))
    . withDirectory("/layout", directory)
    . withMountedCache("/apkcache", cacheVolume("apko"))
    . focus
    $ build --debug --cache-dir /apkache/ /config.yml latest /layout/;
    . directory(/layout/)

  container.from("alpine") $ echo hello, world!;

  container.importDir(layout)
}

fn goBin(container: Container): Container {
  ctr.
    withEnvVariable("GOBIN", "/go/bin").
    withEnvVariable("PATH", "$GOBIN:$PATH", expand: true)
}

base = goBin(packages)
  $ go install "gotest.tools/gotestsum@latest";

# --------------

# -- foo | can't because --foo is a flag
# ; foo  | means it can't be used for expr separator, but could use a comma
# foo  | consistency with bash and graphql

# Name: dash
# ~~Identifiers have dashes~~
#   - aligns with CLIs, bash, etc
# Dagger types are first-class (Container, not dagger.Container)
# Dagger client is global (container, not client.container)
# Dagger never mentioned by name (besides homage in "Dash" itself)
#   - Focus on pure concepts, not branding
# Types, for sanity
#   - Hindley-Milner if I can figure out how to implement it
# Conventional syntax, with a dash of sugar
#   - blocks
#     - ~~whitespace sensitivity or nah? i think yah~~ nah
#       - maybe _only_ have whitespace sensitivty, and reserve {} for key-val?
#   - special quotes: %w{...}
# Operatives, for metaprogramming
#   - Operatives are space-separated?
# ... maybe no operatives? it's a bit circlejerky tbh
#   - this isn't a general-purpose language

# TODO:
# - comment syntax
# - expr separator syntax
# - key/val args syntax
#   - is everything key/val?
#
# design cues:
#   - keep it simple, don't pay 1000 homages to 1000 languages
#     - don't be afraid to be different
#     - don't be afraid to be the same
#   - take the good parts of Bash
#     - it's the "language" tackling the most similar domain
#       - almost every language sucks for quickly scripting commands
#     - examples:
#       - # for comments
#   - favor ergonomics over purity
#     - use keywords (e.g. def) to make it easier to walk through the file using tags/etc.
#     - make things look different if they are interacted with differently
#     - Bass went too far in the "everything is an X" direction
#   - don't circlejerk language shit
#     - Kernel is great but this probably doesn't need operatives
#   - types, with inference (hindley milner?)
#     - no optional typing. don't want fragmentation. it shouldn't be that
#       complicated anyway.
#

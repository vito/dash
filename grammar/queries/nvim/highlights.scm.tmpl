;; Variables

(list (symbol) @variable)

(cons (symbol) @variable)

(scope (symbol) @variable)

(symbind (symbol) @variable)

;; Functions

(list
  . (symbol) @function)

; Keywords construct a symbol

(keyword) @constructor

;; Namespaces

(symbind
  (symbol) @namespace
  . (keyword))

;; Includes

((symbol) @include
  {{match "@include" "Import"}})

;; Keywords

((symbol) @keyword
  {{match "@keyword" "Special"}})

;; Defining

((list
  . (symbol) @keyword.function
  . (symbol) @function
  (symbol)? @parameter)
  {{match "@keyword.function" "Def"}})

((cons
  . (symbol) @keyword.function
  . (symbol) @function
  (symbol)? @parameter)
  {{match "@keyword.function" "Def"}})

((symbol) @keyword.function
  {{match "@keyword.function" "Def"}})

;; Builtins

((symbol) @function.builtin
  {{match "@function.builtin" "Fn"}})

((symbol) @function.macro
  {{match "@function.macro" "Op"}})

;; Conditionals

((symbol) @conditional
  {{match "@conditional" "Cond"}})

;; Repeats

((symbol) @repeat
  {{match "@repeat" "Repeat"}})

;; Operators

; TODO: classify
((symbol) @operator (#any-of? @operator "&" "*" "+" "-" "<" "<=" "=" ">" ">="))

;; Special forms

; (-> 42 x y) highlights 42 as its default highlight
(list
  .
  (symbol) @function.macro
  (#eq? @function.macro "->")
  .
  (_)
  (symbol) @function)

; (-> x y z) highlights first x as var, y z as function
(list
  .
  (symbol) @function.macro
  (#eq? @function.macro "->")
  .
  (symbol) @variable.parameter
  (symbol) @function)

;; Punctuation

[ "(" ")" ] @punctuation.bracket

[ "{" "}" ] @punctuation.bracket

[ "[" "]" ] @punctuation.bracket

((symbol) @punctuation.delimiter
  (#eq? @punctuation.delimiter "->"))

;; Literals

(string) @string

(escape_sequence) @string.escape

(path) @text.uri @string.special
(command) @string.special

(number) @number

(boolean) @boolean

[
  (ignore)
  (null)
] @constant.builtin

[
  "^"
] @character.special

;; Comments

(comment) @comment @spell

{
  package ast
}

Dash <- nodes:(_ e:Expr { return e, nil })* _ !. {
  return Block{sliceOf[Node](nodes)}.Fun()
}

Expr <- Slot / Form

Form <- Infix / Term

Term <- Select / FunCall / List / Literal / Symbol

Slot <- TypeAndArgsAndBlockSlot  // pub a(foo: Boolean!): Integer! { 1 }
      / TypeAndBlockSlot         // pub a: Integer! { 1 }  <- becomes a function that takes an empty record of args, can use other fields
      / TypeAndValueSlot         // pub a: Integer! = 1    <- no longer required, default pre-initialized (don't need to worry about mutation)
      / TypeOnlySlot             // pub a: Integer!        <- becomes required by implicit constructor function
      / ValueOnlySlot            // pub a = 1              <- as above, type inferred as Integer!
      / ClassSlot                // cls A { a: Integer! = 1 } <- becomes a function that takes an empty record of args, can use other fields

TypeOnlySlot <- vis:Visibility _ name:Id _ ColonToken _ type_:Type {
  return SlotDecl{
    Named: name.(string),
    Ret: type_.(Type),
    Visibility: vis.(Visibility),
  }, nil
}

TypeAndValueSlot <- vis:Visibility _ name:Id _ ColonToken _ type_:Type _ "=" _ value:Form {
  return SlotDecl{
    Named: name.(string),
    Ret: type_.(Type),
    Value: value.(Node),
    Visibility: vis.(Visibility),
  }, nil
}

ValueOnlySlot <- vis:Visibility _ name:Id _ '=' _ val:Form {
  return SlotDecl{
    Named: name.(string),
    Value: val.(Node),
    Visibility: vis.(Visibility),
  }, nil
}

TypeAndBlockSlot <- vis:Visibility _ name:Id _ ColonToken _ type_:Type _ block:Block {
  fun, err := block.(Block).Fun()
  if err != nil {
    return nil, err
  }
  fun.Named = name.(string)
  fun.Ret = type_.(Type)
  return SlotDecl{
    Named: name.(string),
    Value: fun,
    Visibility: vis.(Visibility),
  }, nil
}

TypeAndArgsAndBlockSlot <- vis:Visibility _ name:Id _ args:ArgTypes _ ColonToken _ type_:Type _ block:Block {
  // TODO: resolve conflicts between computed block args and provided fun args
  fun, err := block.(Block).Fun()
  if err != nil {
    return nil, err
  }
  fun.Named = name.(string)
  fun.Args = args.([]Keyed[Type])
  fun.Ret = type_.(Type)
  return SlotDecl{
    Named: name.(string),
    Value: fun,
    Visibility: vis.(Visibility),
  }, nil
}

ClassSlot <- ClsToken _ name:Id _ block:Block {
  // TODO: resolve conflicts between computed block args and provided fun args
  fun, err := block.(Block).Fun()
  if err != nil {
    return nil, err
  }
  fun.Named = name.(string)

	args := []Keyed[*hm.Scheme]{}
	for _, arg := range fun.Args {
		args = append(args, Keyed[*hm.Scheme]{arg.Key, hm.NewScheme(nil, arg.Value)})
	}
  fun.Ret = NewRecordType(name.(string), args...)

  return SlotDecl{
    Named: name.(string),
    Value: fun,
    Visibility: PrivateVisibility,
  }, nil
}
ClsToken <- "cls"

Visibility <- PubToken { return PublicVisibility, nil }
            / PvtToken { return PrivateVisibility, nil }
PubToken <- "pub"
PvtToken <- "pvt"

Id <- WordToken
WordToken <- [a-zA-Z0-9]+ {
  return string(c.text), nil
}
UpperId <- UpperToken
UpperToken <- [A-Z][a-zA-Z0-9]* {
  return string(c.text), nil
}

FunCall <- name:Term args:ArgValues {
  return FunCall{name.(Node), Record(args.([]Keyed[Node]))}, nil
}

ArgValues <- "(" args:KeyValue* ")" {
  return sliceOf[Keyed[Node]](args), nil
}
ArgTypes <- "(" args:KeyType* ")" {
  return sliceOf[Keyed[Type]](args), nil
}

KeyValue <- key:WordToken ColonToken _ value:Form _ CommaToken? {
  return Keyed[Node]{key.(string), value.(Node)}, nil
}
KeyType <- key:WordToken ColonToken _ type_:Type _ CommaToken? {
  return Keyed[Type]{key.(string), type_.(Type)}, nil
}
ColonToken <- ":"

Type <- NonNull / NamedType / ListType
NamedType <- name:UpperId {
  return NewRecordType(name.(string)), nil
}
ListType <- '[' inner:Type ']' {
  return ListType{inner.(Type)}, nil
}
NonNull <- inner:Type BangToken {
  return NonNullType{inner.(Type)}, nil
}
BangToken <- '!'

CommaToken <- _ ',' _

Infix <- Default
Default <- left:Form _ InterroToken _ right:Term {
  return Default{left.(Node), right.(Node)}, nil
}
InterroToken <- '?'

Select <- left:Term _ DotToken _ name:Id {
  return Select{left.(Node), name.(string)}, nil
}
DotToken <- '.'

List <- '[' eles:(_ e:Form _ CommaToken? { return e, nil })* ']' {
  return List{sliceOf[Node](eles)}, nil
}

Block <- '{' body:(_ e:Expr _ { return e, nil })* '}' {
  return Block{sliceOf[Node](body)}, nil
}

Symbol <- name:Id {
  return Symbol{name.(string)}, nil
}

// Literals

Literal <- Integer / Boolean / String / Quoted / Null

Integer <- '0' / NonZeroDecimalDigit DecimalDigit* {
  value, err := strconv.ParseInt(string(c.text), 10, 64)
  if err != nil {
    return nil, err
  }
  return Integer(value), nil
}

Exponent <- 'e'i [+-]? DecimalDigit+

String <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
  c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
  value, err := strconv.Unquote(string(c.text))
  if err != nil {
    return nil, err
  }
  return String{value}, nil
}

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

HexDigit <- [0-9a-f]i

Quoted <- '%' quoter:WordToken '{' raw:QuotedRawToken '}' {
  return Quoted{
    quoter.(string),
    raw.(string),
  }, nil
}
QuotedRawToken <- [^}]* {
  return string(c.text), nil
}

Boolean <- TrueToken { return Boolean(true), nil }
         / FalseToken { return Boolean(false), nil }
TrueToken <- "true"
FalseToken <- "false"

Null <- NullToken { return Null{}, nil }
NullToken <- "null"

_ "whitespace" <- [ \t\r\n]* CommentToken?

CommentToken <- '#' .*
